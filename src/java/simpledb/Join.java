package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate jp;
    private DbIterator it1;
    private DbIterator it2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.jp = p;
        this.it1 = child1;
        this.it2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.it1.getTupleDesc()
                .getFieldName(this.jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.it2.getTupleDesc()
                .getFieldName(this.jp.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(it1.getTupleDesc()
                            , it2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        it1.open();
        it2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        it1.close();
        it2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        it1.rewind();
        it2.rewind();
    }


    //TODO: move it to attributes area
    private Tuple tupleFromIt1 = null;
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple nextTuple = null;

        try {
            while (tupleFromIt1 != null || it1.hasNext()) {
                tupleFromIt1 = tupleFromIt1 == null ? 
                                        it1.next() : tupleFromIt1;
                
                while (tupleFromIt1 != null && it2.hasNext()) {
                    Tuple tuple2 = it2.next();

                    if (jp.filter(tupleFromIt1, tuple2)) {
                        return Tuple.merge(tupleFromIt1, tuple2);    
                    }
                }

                it2.rewind();
                tupleFromIt1 = null;
            }
        } catch (DbException e) {
            e.printStackTrace();
            System.exit(0);
        } catch (TransactionAbortedException e) {
            e.printStackTrace();
            System.exit(0);
        } 

        return nextTuple;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        if (this.it1 == null || this.it2 == null)
            return null;
        else
            return new DbIterator[] { this.it1, this.it2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.it1 = children[0];
        this.it2 = children[1];
    }

}
